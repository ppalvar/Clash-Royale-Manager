// <auto-generated />
using System;
using ClashRoyaleManager.Infraestructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClashRoyaleManage.Infraestructure.Migrations.SqliteMigrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Battle", b =>
                {
                    b.Property<Guid>("Player1Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfTrophies")
                        .HasColumnType("integer");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Winner")
                        .HasColumnType("boolean");

                    b.HasKey("Player1Id", "Date");

                    b.HasIndex("Player2Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ElixirCost")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<int>("MaximumLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfAdmissibleDefeats")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfPrizes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Clan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdType")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTrophiesObtainedInWars")
                        .HasColumnType("integer");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<int>("TrophiesNeededToEnter")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdType");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.ClanWar", b =>
                {
                    b.Property<Guid>("IdClan")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdWar")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfPrizes")
                        .HasColumnType("integer");

                    b.HasKey("IdClan", "IdWar");

                    b.HasIndex("IdWar");

                    b.ToTable("ClanWars");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaximunTrophiesAchieved")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfCardsFound")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTrophies")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfWins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerCard", b =>
                {
                    b.Property<Guid>("IdPlayer")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCard")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdClan")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFavority")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("IdPlayer", "IdCard");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdClan");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerChallenge", b =>
                {
                    b.Property<Guid>("IdPlayer")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdChallenge")
                        .HasColumnType("uuid");

                    b.HasKey("IdPlayer", "IdChallenge");

                    b.HasIndex("IdChallenge");

                    b.ToTable("PlayerChallenges");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerClan", b =>
                {
                    b.Property<Guid>("IdPlayer")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClan")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCargo")
                        .HasColumnType("uuid");

                    b.HasKey("IdPlayer", "IdClan");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdClan");

                    b.ToTable("PlayerClans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.SpellCard", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<int>("DamageInArea")
                        .HasColumnType("integer");

                    b.Property<int>("DamageToTowers")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Radio")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("SpellCards");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.StructureCard", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<int>("LifePoints")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("StructureCards");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.TroopCard", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<int>("DamageInArea")
                        .HasColumnType("integer");

                    b.Property<int>("LifePoints")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("TroopCards");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.TypeClan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeClans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.War", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Wars");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Battle", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Player", "Player1")
                        .WithMany("Battles1")
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Player", "Player2")
                        .WithMany("Battles2")
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Clan", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.TypeClan", "TypeClan")
                        .WithMany("Clans")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeClan");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.ClanWar", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Clan", "Clan")
                        .WithMany("ClanWars")
                        .HasForeignKey("IdClan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.War", "War")
                        .WithMany("ClanWars")
                        .HasForeignKey("IdWar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("War");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerCard", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Card", "Card")
                        .WithMany("PlayerCards")
                        .HasForeignKey("IdCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Clan", "Clan")
                        .WithMany("PlayerCards")
                        .HasForeignKey("IdClan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Player", "Player")
                        .WithMany("PlayerCards")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Clan");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerChallenge", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Challenge", "Challenge")
                        .WithMany("PlayerChallenges")
                        .HasForeignKey("IdChallenge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Player", "Player")
                        .WithMany("PlayerChallenges")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.PlayerClan", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Cargo", "Cargo")
                        .WithMany("PlayerClans")
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Clan", "Clan")
                        .WithMany("PlayerClans")
                        .HasForeignKey("IdClan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClashRoyaleManager.Domain.Entities.Player", "Player")
                        .WithMany("PlayerClans")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Clan");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.SpellCard", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Card", "Card")
                        .WithOne("SpellCard")
                        .HasForeignKey("ClashRoyaleManager.Domain.Entities.SpellCard", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.StructureCard", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Card", "Card")
                        .WithOne("StructureCard")
                        .HasForeignKey("ClashRoyaleManager.Domain.Entities.StructureCard", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.TroopCard", b =>
                {
                    b.HasOne("ClashRoyaleManager.Domain.Entities.Card", "Card")
                        .WithOne("TroopCard")
                        .HasForeignKey("ClashRoyaleManager.Domain.Entities.TroopCard", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Card", b =>
                {
                    b.Navigation("PlayerCards");

                    b.Navigation("SpellCard")
                        .IsRequired();

                    b.Navigation("StructureCard")
                        .IsRequired();

                    b.Navigation("TroopCard")
                        .IsRequired();
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Cargo", b =>
                {
                    b.Navigation("PlayerClans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Challenge", b =>
                {
                    b.Navigation("PlayerChallenges");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Clan", b =>
                {
                    b.Navigation("ClanWars");

                    b.Navigation("PlayerCards");

                    b.Navigation("PlayerClans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.Player", b =>
                {
                    b.Navigation("Battles1");

                    b.Navigation("Battles2");

                    b.Navigation("PlayerCards");

                    b.Navigation("PlayerChallenges");

                    b.Navigation("PlayerClans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.TypeClan", b =>
                {
                    b.Navigation("Clans");
                });

            modelBuilder.Entity("ClashRoyaleManager.Domain.Entities.War", b =>
                {
                    b.Navigation("ClanWars");
                });
#pragma warning restore 612, 618
        }
    }
}
